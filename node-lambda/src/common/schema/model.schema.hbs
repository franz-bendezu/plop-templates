import type { ObjectSchema, Root } from 'joi';
import joiCore from 'joi';
import joiDate from '@joi/date';
import { IBase{{pascalCase name}}DTO } from '../../dto/base-{{kebabCase name}}.dto';

export const joi: Root = joiCore.extend(joiDate);

export const DATE_FORMAT = 'YYYY-MM-DD';
export const ALPHANUMERIC_HYPHEN_SPACE_REGEX = /^[-\w\s]+$/;

export interface I{{pascalCase name}}Schema extends IBase{{pascalCase name}}DTO {
    validFromDate: Date;
    validToDate?: Date | null;
}

export const {{camelCase name}}Schema = joi
    .object<I{{pascalCase name}}Schema>({
        name: joi.string().regex(ALPHANUMERIC_HYPHEN_SPACE_REGEX).required(),
        description: joi.string().regex(ALPHANUMERIC_HYPHEN_SPACE_REGEX).required(),
        validFromDate: joi.date().format(DATE_FORMAT).required(),
        validToDate: joi.date().format(DATE_FORMAT).optional().allow(null),
    })
    .messages({
        'date.format': `El campo {#label} debe tener el formato ${DATE_FORMAT}`,
        'number.base': 'El campo {#label} debe ser un n√∫mero',
        'array.base': 'El campo {#label} debe ser un arreglo',
        'date.base': 'El campo {#label} debe ser una fecha',
        'string.pattern.base':
            'El campo {#label} no debe contener caracteres especiales',
    });
