import pino from 'pino';

/**
 * Enum for log levels
 */
export enum LogLevel {
  ERROR = 'error',
  WARN = 'warn',
  INFO = 'info',
  DEBUG = 'debug',
  TRACE = 'trace'
}

/**
 * Interface for the application logger
 */
export interface ILogger {
  /**
   * Set the current log level
   * @param level - Log level to set
   */
  setLogLevel(level: LogLevel): void;
  
  /**
   * Log an error message
   * @param message - Message to log
   * @param data - Optional data to include
   */
  error(message: string, data?: any): void;
  
  /**
   * Log a warning message
   * @param message - Message to log
   * @param data - Optional data to include
   */
  warn(message: string, data?: any): void;
  
  /**
   * Log an info message
   * @param message - Message to log
   * @param data - Optional data to include
   */
  info(message: string, data?: any): void;
  
  /**
   * Log a debug message
   * @param message - Message to log
   * @param data - Optional data to include
   */
  debug(message: string, data?: any): void;
  
  /**
   * Log a trace message
   * @param message - Message to log
   * @param data - Optional data to include
   */
  trace(message: string, data?: any): void;
  
  /**
   * Log a message specifically about lambda operations
   * @param lambdaName - Name of the lambda
   * @param action - Action being performed
   * @param details - Details about the action
   */
  lambdaOperation(lambdaName: string, action: string, details?: any): void;
  
  /**
   * Get the underlying Pino logger instance
   * @returns The Pino logger instance
   */
  getLogger(): pino.Logger;
}
