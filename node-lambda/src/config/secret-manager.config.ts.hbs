import { GetSecretValueCommand, type SecretsManagerClient } from '@aws-sdk/client-secrets-manager';
import { RuntimeError } from '../common/error/runtime-error';

export interface ISecretsManagerConfig {
    getSecretValue<T>(secretId: string): Promise<T>;
}

export default class SecretsManagerConfig implements ISecretsManagerConfig {

    constructor(private readonly secretsManager: SecretsManagerClient) { }

    async fetchSecretValue<T>(secretId: string): Promise<string | undefined> {
        try {
            const command = new GetSecretValueCommand({ SecretId: secretId });
            const response = await this.secretsManager.send(command);
            return response.SecretString;
        } catch (error) {
            throw new RuntimeError({
                statusMessage: 'Error fetching secret',
                cause: error
            });
        }
    }

    async getSecretValue<T>(secretId: string): Promise<T> {
        const secretValue = await this.fetchSecretValue(secretId);
        if (!secretValue) {
            throw new RuntimeError({
                statusMessage: 'Secrets not found'
            });
        }
        const secret = JSON.parse(secretValue);
        return secret;

    }
}