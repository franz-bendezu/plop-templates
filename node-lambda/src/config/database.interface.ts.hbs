export interface IDatabaseConfig {
    username: string;
    password: string;
    engine: string;
    host: string;
    port: number;
    dbname: string;
    dbClusterIdentifier?: string;
}

export interface QueryResult<T, Q> {
    rows?: T[];
}

export interface QueryExecutor {
    <T = any, I = any[], R = QueryResult<T, I>>(
        query: string,
    ): Promise<R>;
    <T = any, I = any[], R = QueryResult<T, I>>(
        query: string,
        values: I[],
    ): Promise<R>;
    <T = any, I = any[], R = QueryResult<T, I>>(
        query: string,
        values?: I[],
    ): Promise<R>;
}

type DatabaseClientExecutor<C, T> = (client: C) => Promise<T>;

export interface IDatabaseManager<C, E extends QueryExecutor = QueryExecutor> {
    executeQuery: E;
    connection<T>(callback: DatabaseClientExecutor<C, T>): Promise<T>;
    transaction<T>(callback: DatabaseClientExecutor<C, T>,): Promise<T>;
}
