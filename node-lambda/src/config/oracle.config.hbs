import { BindParameters, Connection, getConnection, OUT_FORMAT_OBJECT, Result } from 'oracledb';
import { ISecretsManagerConfig } from './secret-manager.config';
import {
    IDatabaseConfig,
    IDatabaseManager,
} from './database.interface';

export interface IDatabaseManagerOracle extends IDatabaseManager<Connection> {
    executeQuery<T = any>(
        query: string,
    ): Promise<Result<T>>;
    executeQuery<T = any>(
        query: string,
        values: BindParameters,
    ): Promise<Result<T>>;
    executeQuery<T = any>(
        query: string,
        values?: BindParameters[],
    ): Promise<Result<T>>;
}

export default class OracleConfig implements IDatabaseManagerOracle {
    public static readonly APPLICATION_NAME = '{{folder}}';
    currentConfig?: IDatabaseConfig;
    constructor(private readonly secretsManagerConfig: ISecretsManagerConfig) { }

    async fetchDatabaseConfig(): Promise<IDatabaseConfig> {
        const NAME_SECRET_DB = process.env.{{nameSecretDb}};
        if (!NAME_SECRET_DB) {
            throw new Error('Secret name not found');
        }
        return this.secretsManagerConfig.getSecretValue<IDatabaseConfig>(
            NAME_SECRET_DB,
        );
    }

    async getDatabaseConfig(): Promise<IDatabaseConfig> {
        if (!this.currentConfig) {
            this.currentConfig = await this.fetchDatabaseConfig();
        }
        return this.currentConfig;
    }

    async createClient(): Promise<Connection> {
        const config = await this.getDatabaseConfig();
        return getConnection({
            user: config.username,
            password: config.password,
            connectString: `${config.host}:${config.port}/${config.dbname}`,
        });
    }

    async executeQuery<T extends any[] = any[], I = any[]>(
        query: string,
        values?: I[]
    ) {
        const client = await this.createClient();
        try {
            const result = await client.execute<T>(query, values || [], {
                outFormat: OUT_FORMAT_OBJECT,
            });
            return { rows: result.rows || [], rowCount: result.rowsAffected || 0 };
        } finally {
            await client.close();
        }
    }

    async connection<T>(
        callback: (client: Connection) => Promise<T>,
    ): Promise<T> {
        const client = await this.createClient();
        try {
            return await callback(client);
        } finally {
            await client.close();
        }
    }

    async transaction<T>(
        transactionCallback: (client: Connection) => Promise<T>,
    ): Promise<T> {
        const client = await this.createClient();
        try {
            await client.execute('BEGIN');
            const result = await transactionCallback(client);
            await client.execute('COMMIT');
            return result;
        } catch (error) {
            await client.execute('ROLLBACK');
            throw error;
        } finally {
            await client.close();
        }
    }
}
