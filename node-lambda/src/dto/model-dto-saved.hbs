import { TimeFormatter } from '../common/formatter/time.formatter';
import I{{pascalCase name}} from '../interface/{{kebabCase name}}.interface';
import { AuditDTO } from './audit.dto';
import Base{{pascalCase name}}DTO, { IBase{{pascalCase name}}DTO } from './base-{{kebabCase name}}.dto';

export interface I{{pascalCase name}}DTO extends IBase{{pascalCase name}}DTO, AuditDTO {
    id: number;
    {{#each modelProperties}}
    {{name}}: {{type}};
    {{/each}} 
}

export default class {{pascalCase name}}DTO extends Base{{pascalCase name}}DTO implements I{{pascalCase name}}DTO {

    constructor(
        public id: number,
        public name: string,
        public description: string,
        public validFrom: string,
        public validTo: string,
        public createdAt: string,
        public modifiedAt: string | null,
        public createdBy: string,
        public modifiedBy: string | null,
        {{#each modelProperties}}
        public {{name}}: {{type}},
        {{/each}}
    ) {
        super(name, description, validFrom, validTo);
    }

    static from(data: I{{pascalCase name}}): {{pascalCase name}}DTO {
        // Transform data into DTO
        return new {{pascalCase name}}DTO(
            data.id,
            data.name,
            data.description,
            TimeFormatter.dateToLocaleString(data.validFrom),
            TimeFormatter.dateToLocaleString(data.validTo),
            TimeFormatter.dateTimeToLocaleString(data.createdAt),
            TimeFormatter.dateTimeToLocaleString(data.modifiedAt),
            data.createdBy,
            data.modifiedBy,
            {{#each modelProperties}}
            data.{{name}},
            {{/each}}
        );
    }

    // Methods
}