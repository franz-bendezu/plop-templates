$<imports>
import I{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}.interface';
import I{{pascalCase name}}ResultRow from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}-query-result.interface';
import {{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/model/{{kebabCase name}}.model';
import { CREATE_QUERY } from '../../../src/{{kebabCase moduleName}}/repository/query/{{kebabCase name}}.query';
import IBase{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/base-{{kebabCase name}}.interface';$<code>$<tests>
    it('should create a new {{pascalCase name}} instance when save is successful', async () => {
        const inputData: IBase{{pascalCase name}} = {
            name: 'test',
            description: 'description',
            validFrom: new Date('2021-01-01T05:00:00.000Z'),
            validTo: new Date('2021-01-01T05:00:00.000Z'),
            {{#each properties}}
            {{camelCase name}}: 'test-value',
            {{/each}}
        };

        const queryResult: QueryResult<I{{pascalCase name}}ResultRow> = {
            rows: [{
                ID: 1,
                NAME: 'test',
                CREATED_AT: new Date('2021-01-01T05:00:00.000Z'),
                MODIFIED_AT: new Date('2021-01-01T05:00:00.000Z'),
                CREATED_BY: 'test',
                MODIFIED_BY: 'test',
                DESCRIPTION: 'description',
                VALID_FROM: new Date('2021-01-01T05:00:00.000Z'),
                VALID_TO: new Date('2021-01-01T05:00:00.000Z'),
                {{#each rowProperties}}
                {{name}}: 'test-value',
                {{/each}}
            }],
            command: '',
            rowCount: 1,
            oid: 0,
            fields: [],
        };

        pgClient.query.mockResolvedValue(queryResult);

        pgClient.transaction.mockImplementation(async (callback) => {
            return await callback(pgClient);
        });

        const result = await {{camelCase name}}Repository.save(inputData);


        expect(pgClient.transaction).toHaveBeenCalledTimes(1);

        expect(pgClient.query).toHaveBeenCalledTimes(1);

        expect(pgClient.query).toHaveBeenCalledWith(
            CREATE_QUERY,
            [
                'test',
                'description',
                new Date('2021-01-01T05:00:00.000Z'),
                new Date('2021-01-01T05:00:00.000Z'),
            ],
        );

        expect(result).toBeInstanceOf({{pascalCase name}});
        const expected = new {{pascalCase name}}(
            1,
            'test',
            'description',
            new Date('2021-01-01T05:00:00.000Z'),
            new Date('2021-01-01T05:00:00.000Z'),
            new Date('2021-01-01T05:00:00.000Z'),
            new Date('2021-01-01T05:00:00.000Z'),
            'test',
            'test',
            {{#each rowProperties}}
            'test-value',
            {{/each}}
        );
        expect(result).toEqual(expected);
    });

    it('should throw a RuntimeError when save fails', async () => {
        const inputData: IBase{{pascalCase name}} = {
            name: 'test',
            description: 'description',
            validFrom: new Date('2021-01-01T05:00:00.000Z'),
            validTo: new Date('2021-01-01T05:00:00.000Z'),
            {{#each properties}}
            {{camelCase name}}: 'test-value',
            {{/each}}
        };

        const error = new Error('Database error');
        pgClient.transaction.mockRejectedValue(error);

        await expect({{camelCase name}}Repository.save(inputData)).rejects.toThrow(RuntimeError);
        await expect({{camelCase name}}Repository.save(inputData)).rejects.toThrow('Bennu Database error');
    });