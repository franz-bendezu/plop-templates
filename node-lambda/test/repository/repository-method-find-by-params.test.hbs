$<imports>
import I{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}.interface';
import I{{pascalCase name}}ResultRow from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}-query-result.interface';
import {{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/model/{{kebabCase name}}.model';
import I{{pascalCase name}}Params from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}-params.interface';$<code>$<tests>
    it('should return an array of {{pascalCase name}} instances when query is successful', async () => {
        const params: I{{pascalCase name}}Params = {
        };

        const queryResult: QueryResult<I{{pascalCase name}}ResultRow> = {
            rows: [
                {
                    ID: 1,
                    NAME: 'test',
                    DESCRIPTION: 'test',
                    VALID_FROM: new Date('2021-01-01T05:00:00.000Z'),
                    VALID_TO: new Date('2021-01-01T05:00:00.000Z'),
                    CREATED_AT: new Date('2021-01-01T05:00:00.000Z'),
                    MODIFIED_AT: new Date('2021-01-01T05:00:00.000Z'),
                    CREATED_BY: 'test',
                    MODIFIED_BY: 'test',
                },
            ],
            command: '',
            rowCount: null,
            oid: 0,
            fields: [],
        };

        dbManager.executeQuery.mockResolvedValue(queryResult);

        const result = await {{camelCase name}}Repository.findAllByParams(params);

        expect(result).toHaveLength(1);
        expect(result[0]).toBeInstanceOf({{pascalCase name}});
        const expected = new {{pascalCase name}}(
            1,
            'test',
            new Date('2021-01-01T05:00:00.000Z'),
            new Date('2021-01-01T05:00:00.000Z'),
            'test',
            'test',
        );
        expect(result[0]).toEqual(expected);
    });

    it('should throw a RuntimeError when query fails', async () => {
        const params: I{{pascalCase name}}Params = {
        };

        const error = new Error('Database error');
        dbManager.executeQuery.mockRejectedValue(error);

        await expect({{camelCase name}}Repository.findAllByParams(params)).rejects.toThrow(RuntimeError);
        await expect({{camelCase name}}Repository.findAllByParams(params)).rejects.toThrow('Bennu Database error');
    });