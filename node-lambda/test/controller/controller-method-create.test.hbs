$<imports>
import {{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/model/{{kebabCase name}}.model';
import Base{{pascalCase name}}DTO from '../../../src/{{kebabCase moduleName}}/dto/base-{{kebabCase name}}.dto';
import {{pascalCase name}}DTO from '../../../src/{{kebabCase moduleName}}/dto/{{kebabCase name}}.dto';
import Base{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/model/base-{{kebabCase name}}.model';$<code>$<tests>
    it('should create and return a {{pascalCase name}}DTO', async () => {
        const inputData = new Base{{pascalCase name}}DTO(
            'test name',
            'test description',
            '2023-01-01',
            '2023-01-31',
        );
        const created{{pascalCase name}} = new {{pascalCase name}}(
            1,
            'test name',
            'test description',
            new Date('2023-01-01T05:00:00.000Z'),
            new Date('2023-01-31T05:00:00.000Z'),
            new Date('2024-11-09T13:16:34.000Z'),
            new Date('2024-11-09T13:16:36.000Z'),
            'test-user',
            'test-user',
        );

        {{camelCase name}}Service.save.mockResolvedValue(created{{pascalCase name}});

        const result = await {{camelCase name}}Controller.save(inputData);

        const expected{{pascalCase name}} = new Base{{pascalCase name}}(
            'test name',
            'test description',
            new Date('2023-01-01T05:00:00.000Z'),
            new Date('2023-01-31T05:00:00.000Z'),
        );

        expect({{camelCase name}}Service.save).toHaveBeenCalledWith(expected{{pascalCase name}});

        expect(result).toBeInstanceOf({{pascalCase name}}DTO);

        const expected{{pascalCase name}}DTO = new {{pascalCase name}}DTO(
            1,
            'test name',
            'test description',
            '2023-01-01',
            '2023-01-31',
            '2024-11-09 08:16:34',
            '2024-11-09 08:16:36',
            'test-user',
            'test-user',
        );

        expect(result).toEqual(expected{{pascalCase name}}DTO);
    });


    it('should handle service errors', async () => {
        const inputData = new Base{{pascalCase name}}DTO(
            'test name',
            'test description',
            '2023-01-01',
            '2023-01-31',
        );
        const errorMessage = 'Failed to create {{pascalCase name}}';
        {{camelCase name}}Service.save.mockRejectedValue(new Error(errorMessage));

        await expect({{camelCase name}}Controller.save(inputData)).rejects.toThrow(errorMessage);
    });