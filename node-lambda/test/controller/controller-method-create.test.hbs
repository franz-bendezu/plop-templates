$<imports>
import I{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}.interface';
import I{{pascalCase name}}ResultRow from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}-query-result.interface';
import {{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/model/{{kebabCase name}}.model';
import IBase{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/base-{{kebabCase name}}.interface';
import Base{{pascalCase name}}DTO from '../../../src/{{kebabCase moduleName}}/dto/base-{{kebabCase name}}.dto';
import {{pascalCase name}}DTO from '../../../src/{{kebabCase moduleName}}/dto/{{kebabCase name}}.dto';$<code>$<tests>
    it('should create and return a {{pascalCase name}}DTO', async () => {
        const inputData = new Base{{pascalCase name}}DTO();
        const created{{pascalCase name}} = new {{pascalCase name}}(
            1,
            'test name',
            new Date(),
            new Date(),
            'test-user',
            'test-user'
        );
        
        {{camelCase name}}Service.save.mockResolvedValue(created{{pascalCase name}});
        
        const result = await {{camelCase name}}Controller.save(inputData);
        
        expect({{camelCase name}}Service.save).toHaveBeenCalledWith(inputData);
        expect(result).toBeInstanceOf({{pascalCase name}}DTO);
        expect(result).toEqual({{pascalCase name}}DTO.from(created{{pascalCase name}}));
    });


    it('should handle service errors', async () => {
        const inputData = new Base{{pascalCase name}}DTO();
        const errorMessage = 'Failed to create {{pascalCase name}}';
        {{camelCase name}}Service.save.mockRejectedValue(new Error(errorMessage));

        await expect({{camelCase name}}Controller.save(inputData)).rejects.toThrow(errorMessage);
    });