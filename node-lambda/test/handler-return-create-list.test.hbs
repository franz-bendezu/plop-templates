$<imports>
import { I{{pascalCase name}}Payload } from '../../../src/{{kebabCase moduleName}}/dto/base-{{kebabCase name}}.dto';
import { StatusCodes } from '../../../src/{{kebabCase moduleName}}/common/response/status-code';
import { ApiGatewayResponse } from '../../../src/{{kebabCase moduleName}}/common/response/api-gateway';
import { RuntimeError } from '../../../src/{{kebabCase moduleName}}/common/error/runtime-error';
import { index } from '../../../src/{{kebabCase moduleName}}/handler';
import {{pascalCase name}}DTO from '../../../src/{{kebabCase moduleName}}/dto/{{kebabCase name}}.dto';
import { {{camelCase name}}Controller } from '../../../src/{{kebabCase moduleName}}/controller/{{kebabCase name}}.controller';
import { ValidationMessage } from '../../../src/{{kebabCase moduleName}}/common/response/validation-message';
import { StatusMessages } from '../../../src/{{kebabCase moduleName}}/common/response/status-messages';
$<code>$<tests>
describe('create list', () => {
    beforeEach(() => {
        jest.resetAllMocks();
    });
    
    const invokeHandler = async (items: any[]) => {
        const event = invokeHandler(items);
        return await index(event, null, null);
    };
    
    it('should successfully create a list of {{camelCase name}}s', async () => {
        const responseData: {{pascalCase name}}DTO[] = [
            {
                id: '1',
                name: 'Test Item 1',
                createdAt: '2023-01-01 12:00:00',
                modifiedAt: '2023-01-01 12:00:00',
                createdBy: 'user',
                modifiedBy: 'user',
                description: 'Description 1',
                validFromDate: '2023-01-01',
                validToDate: '2023-01-31',
                {{#each paramsProperties}}
                {{name}}: '{{value}} 1',
                {{/each}}
            },
            {
                id: '2',
                name: 'Test Item 2',
                createdAt: '2023-01-01 12:00:00',
                modifiedAt: '2023-01-01 12:00:00',
                createdBy: 'user',
                modifiedBy: 'user',
                description: 'Description 2',
                validFromDate: '2023-01-01',
                validToDate: '2023-01-31',
                {{#each paramsProperties}}
                {{name}}: '{{value}} 2',
                {{/each}}
            }
        ];
        
        const mockSaveAll = jest.spyOn({{camelCase name}}Controller, 'saveAll').mockResolvedValue(responseData);

        const data: I{{pascalCase name}}Payload[] = [
            {
                name: 'Test Item 1',
                description: 'Description 1',
                validFromDate: '2023-01-01',
                validToDate: '2023-01-31',
                {{#each paramsProperties}}
                {{name}}: '{{value}} 1',
                {{/each}}
            },
            {
                name: 'Test Item 2',
                description: 'Description 2',
                validFromDate: '2023-01-01',
                validToDate: '2023-01-31',
                {{#each paramsProperties}}
                {{name}}: '{{value}} 2',
                {{/each}}
            }
        ];

        const result = await invokeHandler(data);

        expect(result).toBeInstanceOf(ApiGatewayResponse);
        expect(result).toEqual({
            statusCode: 200,
            body: JSON.stringify({
                mensaje: '{{pascalCase name}}s creados',
                data: responseData,
                estado: ValidationMessage.SUCCESS,
            }),
        });

        expect(mockSaveAll).toHaveBeenCalledWith(data);
    });
    
    it('should return error when body is not an array', async () => {
        // We'll need to mock the event directly for this test case
        const event = {
            body: JSON.stringify({ name: 'Test' }) // Not an array
        } as any;
        
        const result = await index(event, null, null);
        
        expect(result).toEqual({
            statusCode: 400,
            body: JSON.stringify({
                mensaje: 'Cuerpo de solicitud debe ser un arreglo',
                estado: ValidationMessage.BAD,
            }),
        });
    });
    
    it('should throw RuntimeError when saveAll operation fails', async () => {
        const mockError = new RuntimeError({ 
            statusCode: StatusCodes.BAD_REQUEST,
            statusMessage: 'Invalid data' 
        });
        
        const mockSaveAll = jest.spyOn({{camelCase name}}Controller, 'saveAll')
            .mockRejectedValue(mockError);
            
        const data: I{{pascalCase name}}Payload[] = [
            {
                name: 'Test Item 1',
                description: 'Description 1',
                validFromDate: '2023-01-01',
            },
            {
                name: 'Test Item 2',
                description: 'Description 2',
                validFromDate: '2023-01-01',
            }
        ];

        const result = await invokeHandler(data);
        expect(mockSaveAll).toHaveBeenCalled();
        expect(result).toEqual({
            statusCode: 400,
            body: JSON.stringify({
                mensaje: 'Invalid data',
                estado: ValidationMessage.BAD,
            }),
        });
    });
    
    it('should throw internal server error when an unexpected error occurs', async () => {
        const mockError = new Error('Unexpected error');
        const mockSaveAll = jest.spyOn({{camelCase name}}Controller, 'saveAll')
            .mockRejectedValue(mockError);

        const data: I{{pascalCase name}}Payload[] = [
            {
                name: 'Test Item 1',
                description: 'Description 1',
                validFromDate: '2023-01-01',
            }
        ];

        const result = await invokeHandler(data);
        expect(mockSaveAll).toHaveBeenCalled();
        expect(result).toEqual({
            statusCode: 500,
            body: JSON.stringify({
                mensaje: StatusMessages.INTERNAL_SERVER_ERROR,
                estado: ValidationMessage.BAD,
            }),
        });
    });
});
