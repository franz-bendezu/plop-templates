$<imports>
import I{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/{{kebabCase name}}.interface';
import IBase{{pascalCase name}} from '../../../src/{{kebabCase moduleName}}/interface/base-{{kebabCase name}}.interface';$<code>$<tests>
    it('should return the result of {{camelCase name}}Repository.save', async () => {
        const params: IBase{{pascalCase name}} = {
            name: 'test',
            description: '',
            validFrom: new Date('2021-01-01T05:00:00.000Z'),
            validTo: new Date('2021-01-01T05:00:00.000Z'),
        };
        const expected: I{{pascalCase name}} = {
            id: 1,
            name: 'test',
            createdAt: new Date('2021-01-01T05:00:00.000Z'),
            modifiedAt: null,
            createdBy: 'user',
            modifiedBy: null,
            description: '',
            validFrom: new Date('2021-01-01T05:00:00.000Z'),
            validTo: new Date('2021-01-01T05:00:00.000Z'),
        };
        {{camelCase name}}Repository.save.mockResolvedValue(expected);

        const result = await {{camelCase name}}Service.save(params);

        expect(result).toBe(expected);
        expect({{camelCase name}}Repository.save).toHaveBeenCalledWith(params);
    });