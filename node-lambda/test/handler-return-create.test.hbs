$<imports>
import { IBase{{pascalCase name}}DTO } from '../../src/{{kebabCase moduleName}}/dto/base-{{kebabCase name}}.dto';$<code>$<tests>
    it('should successfully save a new {{camelCase name}}', async () => {
        const responseData: {{pascalCase name}}DTO = {
            id: 1,
            name: 'test',
            createdAt: '2023-01-01 12:00:00',
            modifiedAt: '2023-01-01 12:00:00',
            createdBy: 'user',
            modifiedBy: 'user-mod',
            description: 'test',
            validFrom: '2023-01-01',
            validTo: '2023-01-31',
            {{#each paramsProperties}}
            {{name}}: '{{value}}',
            {{/each}}
        };
        const mockSave = jest.spyOn({{camelCase name}}Controller, 'save').mockResolvedValue(responseData);
        
        const data: Required<IBase{{pascalCase name}}DTO> = {
            name: 'test',
            description: 'test',
            validFrom: '2023-01-01',
            validTo: '2023-01-31',
            {{#each paramsProperties}}
            {{name}}: '{{value}}',
            {{/each}}
        };

        const result = await invokeHandler(JSON.stringify(data));

        expect(result).toBeInstanceOf(ApiGatewayResponse);
        expect(result).toEqual({
            statusCode: 201,
            body: JSON.stringify({
                mensaje: '{{pascalCase name}} creado',
                data: responseData,
                estado: ValidationMessage.SUCCESS,
            }),
        });

        expect(mockSave).toHaveBeenCalledWith(data);
        });

    it('should throw RuntimeError when save operation fails', async () => {
        const mockError = new RuntimeError({ statusMessage: 'Save failed' });

        const mockSave = jest.spyOn(productTempController, 'save')
            .mockRejectedValue(mockError);

        const data: Required<ISchemaBase{{pascalCase name}}> = {
            name: 'test',
            description: 'test',
            validFromDate: '2023-01-01',
            validToDate: '2023-01-31',
        };

        const result = await invokeHandler(JSON.stringify(data));
        expect(mockSave).toHaveBeenCalled();
        expect(result).toEqual({
            statusCode: 500,
            body: JSON.stringify({
                mensaje: 'Save failed',
                estado: ValidationMessage.BAD,
            }),
        });
    });

    it('should throw internal server error when an unexpected error occurs', async () => {
        const mockError = new Error('Unexpected error');
        const mockSave = jest.spyOn(productTempController, 'save')
            .mockRejectedValue(mockError);

        const result = await invokeHandler(JSON.stringify({ name: 'test' }));
        expect(mockSave).toHaveBeenCalled();
        expect(result).toEqual({
            statusCode: 500,
            body: JSON.stringify({
                mensaje: StatusMessages.INTERNAL_SERVER_ERROR,
                estado: ValidationMessage.BAD,
            }),
        });
    });